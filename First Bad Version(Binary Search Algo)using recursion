/* The isBadVersion API is defined in the parent class VersionControl.
      boolean isBadVersion(int version); */

public class Solution extends VersionControl {
    int res;int var;
    public int firstBadVersion(int n) {
        var = n;
        badVersion(1, n); 
        return res;
    }
    
    public void badVersion(int start, int end){
        //finds mid and also check the overflow best method to do
        int mid = start + end >>> 1;
        //checks if the current pos has false value and the next true then next is the answer
        if(!isBadVersion(mid) && isBadVersion(mid + 1)){
            res = mid + 1;
            return;
        }
        
        if(mid <= 1){
            res = 1;
            return;
        }
        if(mid >= var){
            res = var;
            return;
        }    
        
        if(isBadVersion(mid) || isBadVersion(mid-1)){
            badVersion(start, mid);
            
        }
        else{
            badVersion(mid, end);
        }
    }
    
}




/////////////////same solution without recursion

// public int firstBadVersion(int n) {
//     int start = 1, end = n;
//     while (start < end) {
//         int mid = start + (end-start) / 2;
//         if (!isBadVersion(mid)) start = mid + 1;
//         else end = mid;            
//     }        
//     return start;
// }
