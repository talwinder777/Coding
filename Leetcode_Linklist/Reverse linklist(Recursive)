/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
class Solution {
    ListNode Head = null;
    public ListNode reverseList(ListNode head) {
        if(head == null)
             return head;
        return reverse(head,1);
    }
    //fuction first goes to end of the list and then stores the last node address in Head acnd count the no of nodes
    //along the way....then starts recursing back and counting decreases untill it reaches 1 and we return the Last node
    public ListNode reverse(ListNode head, int count){
        if(head.next == null){
            Head = head;
            return head;
        }
        count = count + 1;
        ListNode node = reverse(head.next, count);
        //joins the calling node as the next address of returning node and setting calling nodes next = null
        node.next = head;
        head.next = null;
        count--;
        if(count == 1){
            return Head;
        }
        return head;
            
    }
}
