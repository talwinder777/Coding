/*class Solution {
my solution not passing all test cases
    public boolean searchMatrix(int[][] matrix, int target) {
        int rows = matrix.length;
        if(rows == 0)return false;
        int cols = matrix[0].length;
        if(cols == 0)return false;
        for(int i = 0; i < rows; i++){
            if(bs(i, i, cols -1, target, matrix, true) || (bs(i, i, rows - 1, target, matrix, false)))
                return true;
        }
        return false;
    }
    public boolean bs(int s, int start, int end, int target, int[][] matrix, boolean flag){
        if(start > end)
            return false;
        int mid = start + (end - start)/2;
        if(flag == true){
            if(mid > matrix.length -1)
                return false;
            if(target == matrix[s][mid])
                return true;
            else if(target < matrix[s][mid])
                return bs(s, start, mid - 1, target, matrix, flag);
            else
                return bs(s, mid + 1, end, target, matrix, flag);
        }
        else{
            if(mid > matrix[0].length - 1)
                return false;
            if(target == matrix[mid][s])
                return true;
            else if(target < matrix[mid][s])
                return bs(s, start, mid - 1, target, matrix, flag);
            else
                return bs(s, mid + 1, end, target, matrix, flag);
        }
       
    }
}
beats 16 % running time*/
class Solution{
public boolean searchMatrix(int[][] matrix, int target) {
    if(matrix.length == 0|| matrix[0].length == 0)return false;
    return(searchMatrixHelper(matrix, 0, 0, matrix.length-1, matrix[0].length-1, target));
}

private boolean searchMatrixHelper (int[][] matrix, int i, int j, int i_, int j_, int target){
    if(i > i_ || j> j_){
        return false;
    }
    int midRow= (i+i_)/2; int midCol=(j+j_)/2;
    if(matrix[midRow][midCol] == target){
        return true;
    }else if(matrix[midRow][midCol] > target){
        return (searchMatrixHelper(matrix, i ,j, i_, midCol-1, target) || searchMatrixHelper(matrix, i, midCol, midRow-1, j_, target));
    }else{
        return (searchMatrixHelper(matrix, midRow+1 ,j, i_, j_, target) || searchMatrixHelper(matrix, i, midCol+1, midRow, j_, target));
    }
}
}

/*
best running time
class Solution {
    public boolean searchMatrix(int[][] matrix, int target) {
        // corner case
        if (matrix == null || matrix.length == 0 || matrix[0] == null || matrix[0].length == 0) return false;
        //
        int row = matrix.length - 1;
        int col = 0;
        while (row >= 0 && col < matrix[0].length) {
            if (matrix[row][col] == target) return true;
            if (matrix[row][col] < target) {
                col++;
            } else row--;
        }
        return false;
    }
}
*/
